{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { assign, reject } from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./designer-render-body/designer-render-body.component\";\nexport let DesignerRenderComponent = /*#__PURE__*/(() => {\n  class DesignerRenderComponent {\n    /**\r\n     *  Constructor del componente\r\n     */\n    constructor() {\n      /**\r\n       * Bandera para indicar que se debe updatear el preview\r\n      */\n      this.updatePreview = false;\n      /**\r\n       * Indica que se debe scrollear hasta mostrar un bloque\r\n      */\n      this.scrollToBlock = '';\n      this.delete = new EventEmitter();\n      this.insert = new EventEmitter();\n      this.duplicate = new EventEmitter();\n      /**\r\n       * Enviar evento para Inspeccionar un bloque\r\n       */\n      this.inspectBlock = new EventEmitter();\n      /**\r\n       * Enviar evento para Inspeccionar el draft\r\n       */\n      this.inspectDraft = new EventEmitter();\n      /**\r\n       * Enviar evento para Inspeccionar el iform\r\n       */\n      this.inspectIform = new EventEmitter();\n      /**\r\n       * Evento para notificar cambios en propiedades del block\r\n      */\n      this.blockValuesChange = new EventEmitter();\n      /**\r\n       * Evento para notificar cambios en propiedades del draft\r\n      */\n      this.flowValuesChange = new EventEmitter();\n    }\n    /**\r\n     * Handler para manejar cuándo se agrega un edge\r\n     */\n    edgeAdded($event) {\n      const edge = $event.edge;\n      /** Buscamos los edges actuales */\n      const list = this.configuration.edges;\n      /** Eliminamos el edge en caso que existiera */\n      const filtered = reject(list, c => c.source.uuid === edge.source.uuid && c.source.port === edge.source.port && c.target.uuid === edge.target.uuid && c.target.port === edge.target.port);\n      const newList = filtered.concat([edge]);\n      /** calculamos la nueva configuration */\n      const newConfiguration = assign({}, this.configuration, {\n        edges: newList\n      });\n      /** Notificamos el cambio */\n      this.flowValuesChange.emit({\n        flow: newConfiguration\n      });\n    }\n    /**\r\n     * Handler para manejar cuándo se detacha un edge\r\n     */\n    edgeDetached($event) {\n      const edge = $event.edge;\n      /** Buscamos los edges actuales */\n      const list = this.configuration.edges;\n      /** Eliminamos el edge en caso que existiera */\n      const filtered = reject(list, c => c.source.uuid === edge.source.uuid && c.source.port === edge.source.port && c.target.uuid === edge.target.uuid && c.target.port === edge.target.port);\n      /** calculamos la nueva configuration */\n      const newConfiguration = assign({}, this.configuration, {\n        edges: filtered\n      });\n      /** Notificamos el cambio */\n      this.flowValuesChange.emit({\n        flow: newConfiguration\n      });\n    }\n    /**\r\n     * Handler para manejar cuándo se detacha un edge\r\n     */\n    layoutChanged($event) {\n      const change = $event.layout;\n      /** calculamos el nuevo layout */\n      const newLayout = assign({}, this.configuration.layout, change);\n      /** calculamos la nueva configuration */\n      const newConfiguration = assign({}, this.configuration, {\n        layout: newLayout\n      });\n      /** Notificamos el cambio */\n      this.flowValuesChange.emit({\n        flow: newConfiguration\n      });\n    }\n    /**\r\n     * Handler para manejar cuándo se elimina un block\r\n     */\n    blockDeleted($event) {\n      /**\r\n       * Para eliminar es necesario\r\n       * - Emitir evento para borrar bloque\r\n       * - Eliminar de layout - edges y emitir evento\r\n       */\n      const uuid = $event.block.uuid;\n      const layout = Object.assign({}, this.configuration.layout);\n      delete layout[uuid];\n      const edges = reject(this.configuration.edges, c => c.source.uuid === uuid || c.target.uuid === uuid);\n      /** Creamos la nueva configuration sin el bloque */\n      const configuration = assign({}, this.configuration, {\n        layout: layout,\n        edges: edges\n      });\n      /** Notificamos la eliminación del bloque */\n      this.delete.emit($event);\n      /** Notificamos el cambio de la configuracion */\n      this.flowValuesChange.emit({\n        flow: configuration\n      });\n    }\n  }\n  DesignerRenderComponent.ɵfac = function DesignerRenderComponent_Factory(t) {\n    return new (t || DesignerRenderComponent)();\n  };\n  DesignerRenderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DesignerRenderComponent,\n    selectors: [[\"ios-designer-render\"]],\n    inputs: {\n      configuration: \"configuration\",\n      types: \"types\",\n      blocks: \"blocks\",\n      blockFooter: \"blockFooter\",\n      availablesBlocks: \"availablesBlocks\",\n      selected: \"selected\",\n      updatePreview: \"updatePreview\",\n      scrollToBlock: \"scrollToBlock\"\n    },\n    outputs: {\n      delete: \"delete\",\n      insert: \"insert\",\n      duplicate: \"duplicate\",\n      inspectBlock: \"inspectBlock\",\n      inspectDraft: \"inspectDraft\",\n      inspectIform: \"inspectIform\",\n      blockValuesChange: \"blockValuesChange\",\n      flowValuesChange: \"flowValuesChange\"\n    },\n    decls: 5,\n    vars: 10,\n    consts: [[1, \"render-wrapper\"], [1, \"render-header\"], [1, \"render-body\"], [3, \"availablesBlocks\", \"edges\", \"layout\", \"zoom\", \"themeCss\", \"connectorType\", \"focused\", \"blocks\", \"selected\", \"types\", \"delete\", \"insert\", \"duplicate\", \"move\", \"inspectBlock\", \"edgeAdded\", \"edgeDetached\", \"layoutChanged\"]],\n    template: function DesignerRenderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Yo soy el header del renderizador \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"ios-designer-render-body\", 3);\n        i0.ɵɵlistener(\"delete\", function DesignerRenderComponent_Template_ios_designer_render_body_delete_4_listener($event) {\n          return ctx.blockDeleted($event);\n        })(\"insert\", function DesignerRenderComponent_Template_ios_designer_render_body_insert_4_listener($event) {\n          return ctx.insert.emit($event);\n        })(\"duplicate\", function DesignerRenderComponent_Template_ios_designer_render_body_duplicate_4_listener($event) {\n          return ctx.duplicate.emit($event);\n        })(\"move\", function DesignerRenderComponent_Template_ios_designer_render_body_move_4_listener($event) {\n          return ctx.move.emit($event);\n        })(\"inspectBlock\", function DesignerRenderComponent_Template_ios_designer_render_body_inspectBlock_4_listener($event) {\n          return ctx.inspectBlock.emit($event);\n        })(\"edgeAdded\", function DesignerRenderComponent_Template_ios_designer_render_body_edgeAdded_4_listener($event) {\n          return ctx.edgeAdded($event);\n        })(\"edgeDetached\", function DesignerRenderComponent_Template_ios_designer_render_body_edgeDetached_4_listener($event) {\n          return ctx.edgeDetached($event);\n        })(\"layoutChanged\", function DesignerRenderComponent_Template_ios_designer_render_body_layoutChanged_4_listener($event) {\n          return ctx.layoutChanged($event);\n        });\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"availablesBlocks\", ctx.availablesBlocks)(\"edges\", ctx.configuration.edges)(\"layout\", ctx.configuration.layout)(\"zoom\", ctx.configuration.zoom)(\"themeCss\", ctx.configuration.themeCss)(\"connectorType\", ctx.configuration.connectorType)(\"focused\", ctx.configuration.focused)(\"blocks\", ctx.blocks)(\"selected\", ctx.selected)(\"types\", ctx.types);\n      }\n    },\n    dependencies: [i1.DesignerRenderBodyComponent],\n    styles: [\".render-header[_ngcontent-%COMP%]{border:5px dashed silver;padding:10px;background-color:#fff;margin:10px}\"]\n  });\n  return DesignerRenderComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}